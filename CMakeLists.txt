cmake_minimum_required(VERSION 3.22)
project(Snake3)

set(CMAKE_CXX_STANDARD 23)

find_package(glfw3 3.1 REQUIRED)
find_package(OpenGL REQUIRED)
find_package(OpenAL REQUIRED)
include_directories(/usr/include/freetype2)
include_directories(/usr/include/AL)

add_executable(Snake3 main.cpp ItemsDto/BaseItem.cpp ItemsDto/BaseItem.h stdafx.h ItemsDto/Cube.cpp ItemsDto/Cube.h App.cpp App.h Manager/ResourceManager.cpp Manager/ResourceManager.h ItemsDto/GameField.cpp ItemsDto/GameField.h Renderer/Opengl/GameFieldRenderer.cpp Renderer/Opengl/GameFieldRenderer.h Renderer/Opengl/BaseRenderer.cpp Renderer/Opengl/BaseRenderer.h Manager/RenderManager.cpp Manager/RenderManager.h ItemsDto/Snake.cpp ItemsDto/Snake.h Renderer/Opengl/SnakeRenderer.cpp Renderer/Opengl/SnakeRenderer.h Manager/KeyboardManager.cpp Manager/KeyboardManager.h Handler/SnakeMoveHandler.cpp Handler/SnakeMoveHandler.h Handler/BaseHandler.cpp Handler/BaseHandler.h Physic/CollisionDetector.cpp Physic/CollisionDetector.h ItemsDto/BaseContainer.cpp ItemsDto/BaseContainer.h ItemsDto/BaseContainerInterface.cpp ItemsDto/BaseContainerInterface.h Renderer/Opengl/EatRenderer.cpp Renderer/Opengl/EatRenderer.h Renderer/Opengl/TextRenderer.cpp Renderer/Opengl/TextRenderer.h ItemsDto/Text.cpp ItemsDto/Text.h Manager/EatManager.cpp Manager/EatManager.h Handler/EatLocationHandler.cpp Handler/EatLocationHandler.h ItemsDto/Eat.cpp ItemsDto/Eat.h ItemsDto/ObjItem.cpp ItemsDto/ObjItem.h ItemsDto/Radar.cpp ItemsDto/Radar.h Renderer/Opengl/RadarRenderer.cpp Renderer/Opengl/RadarRenderer.h Handler/RadarHandler.cpp Handler/RadarHandler.h Handler/BaseKeydownHandle.cpp Handler/BaseKeydownHandle.h Renderer/Opengl/EatRemoveAnimateRenderer.cpp Renderer/Opengl/EatRemoveAnimateRenderer.h ItemsDto/Barriers.cpp ItemsDto/Barriers.h Renderer/Opengl/BarrierRenderer.cpp Renderer/Opengl/BarrierRenderer.h Manager/ShaderManager.cpp Manager/ShaderManager.h Manager/LevelManager.cpp Manager/LevelManager.h Manager/VboIndexer.cpp Manager/VboIndexer.h ItemsDto/ObjWall.cpp ItemsDto/ObjWall.h Renderer/Opengl/ObjWallRenderer.cpp Renderer/Opengl/ObjWallRenderer.h Manager/Camera.cpp Manager/Camera.h Renderer/Opengl/Model/TextModel.cpp Renderer/Opengl/Model/TextModel.h Renderer/Opengl/Model/Character.cpp Renderer/Opengl/Model/Character.h Renderer/Opengl/Model/Utils/Vao.cpp Renderer/Opengl/Model/Utils/Vao.h Renderer/Opengl/Model/Utils/Vbo.cpp Renderer/Opengl/Model/Utils/Vbo.h Renderer/Opengl/Model/Utils/Ebo.cpp Renderer/Opengl/Model/Utils/Ebo.h Renderer/Opengl/Model/Utils/Mesh.cpp Renderer/Opengl/Model/Utils/Mesh.h Renderer/Opengl/Model/GameFieldModel.cpp Renderer/Opengl/Model/GameFieldModel.h Renderer/Opengl/Model/RadarModel.cpp Renderer/Opengl/Model/RadarModel.h Resource/ObjModelLoader.cpp Resource/ObjModelLoader.h Resource/TextureLoader.cpp Resource/TextureLoader.h Resource/ShaderLoader.cpp Resource/ShaderLoader.h Manager/TextureManager.cpp Manager/TextureManager.h Renderer/Opengl/SkyboxRenderer.cpp Renderer/Opengl/SkyboxRenderer.h Renderer/Opengl/DepthMapRenderer.cpp Renderer/Opengl/DepthMapRenderer.h Renderer/Opengl/Line.h Renderer/Opengl/BloomRenderer.cpp Renderer/Opengl/BloomRenderer.h Renderer/Opengl/Model/RainModel.cpp Renderer/Opengl/Model/RainModel.h Renderer/Opengl/RainRenderer.cpp Renderer/Opengl/RainRenderer.h Renderer/Opengl/RainDropRenderer.cpp Renderer/Opengl/RainDropRenderer.h Renderer/Opengl/Model/MeshModel.cpp Renderer/Opengl/Model/MeshModel.h Resource/AnimLoader.cpp Resource/AnimLoader.h ItemsDto/AnimItem.cpp ItemsDto/AnimItem.h Renderer/Opengl/Model/AnimationModel.cpp Renderer/Opengl/Model/AnimationModel.h Renderer/Opengl/AnimRenderer.cpp Renderer/Opengl/AnimRenderer.h Renderer/Opengl/Model/Utils/Tree.h)
target_link_libraries(${PROJECT_NAME} glfw glut GLU GL GLEW freetype openal alut assimp)

file(COPY Assets DESTINATION ${CMAKE_BINARY_DIR})

### TESTING #################################################
enable_testing()
#

file(GLOB_RECURSE TEST_SOURCES Tests/*.cpp)
add_executable(Tests Tests/main.cpp ${TEST_SOURCES} ItemsDto/BaseItem.cpp ItemsDto/BaseItem.h stdafx.h ItemsDto/Cube.cpp ItemsDto/Cube.h Manager/ResourceManager.cpp Manager/ResourceManager.h ItemsDto/GameField.cpp ItemsDto/GameField.h Renderer/Opengl/GameFieldRenderer.cpp Renderer/Opengl/GameFieldRenderer.h Renderer/Opengl/BaseRenderer.cpp Renderer/Opengl/BaseRenderer.h Manager/RenderManager.cpp Manager/RenderManager.h ItemsDto/Snake.cpp ItemsDto/Snake.h Renderer/Opengl/SnakeRenderer.cpp Renderer/Opengl/SnakeRenderer.h Manager/KeyboardManager.cpp Manager/KeyboardManager.h Handler/SnakeMoveHandler.cpp Handler/SnakeMoveHandler.h Handler/BaseHandler.cpp Handler/BaseHandler.h Physic/CollisionDetector.cpp Physic/CollisionDetector.h ItemsDto/BaseContainer.cpp ItemsDto/BaseContainer.h ItemsDto/BaseContainerInterface.cpp ItemsDto/BaseContainerInterface.h Renderer/Opengl/EatRenderer.cpp Renderer/Opengl/EatRenderer.h Renderer/Opengl/TextRenderer.cpp Renderer/Opengl/TextRenderer.h ItemsDto/Text.cpp ItemsDto/Text.h Manager/EatManager.cpp Manager/EatManager.h Handler/EatLocationHandler.cpp Handler/EatLocationHandler.h ItemsDto/Eat.cpp ItemsDto/Eat.h ItemsDto/ObjItem.cpp ItemsDto/ObjItem.h ItemsDto/Radar.cpp ItemsDto/Radar.h Renderer/Opengl/RadarRenderer.cpp Renderer/Opengl/RadarRenderer.h Handler/RadarHandler.cpp Handler/RadarHandler.h Handler/BaseKeydownHandle.cpp Handler/BaseKeydownHandle.h Renderer/Opengl/EatRemoveAnimateRenderer.cpp Renderer/Opengl/EatRemoveAnimateRenderer.h ItemsDto/Barriers.cpp ItemsDto/Barriers.h Renderer/Opengl/BarrierRenderer.cpp Renderer/Opengl/BarrierRenderer.h Manager/ShaderManager.cpp Manager/ShaderManager.h Manager/LevelManager.cpp Manager/LevelManager.h Manager/VboIndexer.cpp Manager/VboIndexer.h ItemsDto/ObjWall.cpp ItemsDto/ObjWall.h Renderer/Opengl/ObjWallRenderer.cpp Renderer/Opengl/ObjWallRenderer.h Manager/Camera.cpp Manager/Camera.h Renderer/Opengl/Model/TextModel.cpp Renderer/Opengl/Model/TextModel.h Renderer/Opengl/Model/Character.cpp Renderer/Opengl/Model/Character.h Renderer/Opengl/Model/Utils/Vao.cpp Renderer/Opengl/Model/Utils/Vao.h Renderer/Opengl/Model/Utils/Vbo.cpp Renderer/Opengl/Model/Utils/Vbo.h Renderer/Opengl/Model/Utils/Ebo.cpp Renderer/Opengl/Model/Utils/Ebo.h Renderer/Opengl/Model/Utils/Mesh.cpp Renderer/Opengl/Model/Utils/Mesh.h Renderer/Opengl/Model/GameFieldModel.cpp Renderer/Opengl/Model/GameFieldModel.h Renderer/Opengl/Model/RadarModel.cpp Renderer/Opengl/Model/RadarModel.h Resource/ObjModelLoader.cpp Resource/ObjModelLoader.h Resource/TextureLoader.cpp Resource/TextureLoader.h Resource/ShaderLoader.cpp Resource/ShaderLoader.h Manager/TextureManager.cpp Manager/TextureManager.h Renderer/Opengl/BloomRenderer.cpp Renderer/Opengl/BloomRenderer.h)
target_link_libraries(Tests glfw glut GLU GL GLEW freetype)